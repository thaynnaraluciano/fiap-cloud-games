name: CI

on:
  push:
    branches:
      - feat/dev-deploy

permissions:
  contents: read
  id-token: write

env:
  DOCKERHUB_IMAGE: fiapcloudgames/tech-challenge
  ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout do código
        uses: actions/checkout@v4

      - name: Configurar .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x

      - name: Restaurar dependências
        run: dotnet restore

      - name: Executar testes unitários
        run: dotnet test --no-restore --verbosity normal
        
  docker:
    runs-on: ubuntu-latest
    needs: test
    outputs:
      ecr_image: ${{ steps.set-output.outputs.ecr_image }}
      docker_image: ${{ steps.set-output.outputs.docker_image }}
    steps:
      - name: Checkout do código
        uses: actions/checkout@v4

      - name: Login no DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Definir tag da imagem
        id: vars
        run: |
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            echo "TAG=pr-${{ github.event.pull_request.number }}" >> $GITHUB_ENV
          else
            echo "TAG=latest" >> $GITHUB_ENV
          fi
          echo "IMAGE=fiapcloudgames/tech-challenge" >> $GITHUB_ENV

      - name: Build and push image to Docker Hub & ECR
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ env.DOCKERHUB_IMAGE }}:${{ env.TAG }}
            ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ env.TAG }}
            ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:latest

  deploy:
    needs: docker
    runs-on: ubuntu-latest
    # if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Render ECS task definition
        id: render-task
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ecs/task-definition.json
          image: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ env.TAG }}
          container-name: fiap-cloud-games-web
          environment-variables: |
            DB_HOST=${{ secrets.DB_HOST }}
            DB_NAME=${{ secrets.DB_NAME }}
            DB_USER=${{ secrets.DB_USER }}
            DB_PASSWORD=${{ secrets.DB_PASSWORD }}

      - name: Deploy to ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          task-definition: ${{ steps.render-task.outputs.task-definition }}
          service: fiap-cloud-games-service
          cluster: ${{ secrets.ECS_CLUSTER }}
          # wait-for-service-stability: true
